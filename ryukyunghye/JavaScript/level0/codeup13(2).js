// 13. 기초 - 종합(2)

/* [86] 그림 파일 저장용량 계산하기
실제로 일반적인 1024 * 768 사이즈(해상도)의 각점에 대해
24비트(rgb 각각 8비트씩 3개)로 저장하려면 1024 * 768 * 24 bit의 저장 용량이 필요하다.
이미지의 가로 해상도 w,세로 해상도 h, 한 픽셀을 저장하기 위한 비트 b가 주어질 때, 압축하지 않고 저장하기 위해 필요한 저장 용량을 계산하는 프로그램을 작성해보자.
이렇게 이미지의 원래 데이터를 압축하지 않고 그대로 저장하는 대표적인 이미지 파일 .bmp 파일이며 비트로 그림을 구성한다고 하여 비트맵 방식 또는 레스터 방식이라고 한다.
입력) w, h, b 가 공백을 두고 입력된다. 단, w, h는 모두 정수이고 1~1024 이다. b는 40이하의 4의 배수이다.
출력) 필요한 저장 공간을 MB 단위로 바꾸어 출력한다. 소수점 이하 셋째 자리에서 반올림해 둘째 자리까지 출력한 뒤 MB를 출력한다.*/
const num86 = prompt("w h b를 입력하세요").split(" ");
const MB =
  (Number(num86[0]) * Number(num86[1]) * Number(num86[2])) / (8 * 1024 ** 2);
console.log(`${MB.toFixed(2)}MB`);

/* [87] 여기까지! 이제 그만~
1, 2, 3 ... 을 순서대로 계속 더해나갈 때, 그 합이 입력한 정수보다 작을 동안만 계속 더하는 프로그램을 작성해보자.
즉, 1부터 n까지 정수를 계속 더한다고 할 때, 어디까지 더해야 입력한 수보다 같거나 커지는지 알아보고자 하는 문제이다.
하지만, 이번에는 그 때의 합을 출력해야 한다.
예를 들어 57을 입력하면 1+2+3+...+8+9+10=55에 다시 11을 더해 66이 될 때, 그 값 66이 출력되어야 한다.
입력) 언제까지 합을 계산할 지, 정수 1개를 입력받는다. 단, 입력되는 자연수는 100,000,000이하이다.
출력) 1, 2, 3, 4, 5 ... 순서대로 계속 더해가다가, 그 합이 입력된 정수보다 커지거나 같아지는 경우, 그때까지의 합을 출력한다.*/
const num87 = prompt("정수를 입력하세요");
let total87 = 0;
let i = 1;
while (total87 < Number(num87)) {
  total += i;
  i++;
}
console.log(total);

/* [88] 3의 배수는 통과?
1부터 입력한 정수까지 1씩 증가시켜 출력하는 프로그램을 작성하되, 3의 배수인 경우는 출력하지 않도록 만들어보자.
예를 들면, 1 2 4 5 7 8 10 11 13 14 ... 와 같이 출력하는 것이다.
입력) 정수 1개를 입력받는다.( 1 ~ 100)
출력) 1부터 입력한 정수보다 작거나 같을 때까지 1씩 증가시켜 출력하되 3의 배수는 출력하지 않는다.*/
const num88 = prompt("정수를 입력하세요");
for (let i = 1; i <= Number(num88); i++) {
  if (i % 3 != 0) {
    process.stdout.write(i);
    console.log(i);
  }
}

/* [89] 수 나열하기1
영일이는 프로그램을 만들어 더 큰 수도 자동으로 계산하고 싶어졌다.
시작 값(a), 등차(d), 몇 번째인지를 나타내는 정수(n)가 입력될 때 n번째 수를 출력하는 프로그램을 만들어보자.
입력) 시작 값(a), 등차의 값(d), 몇 번째 수 인지를 의미하는 정수(n)가 공백을 두고 입력된다.(모두 0 ~ 100)
출력) n번째 수를 출력한다.*/
const num89 = prompt("a, d, n을 입력하세요").split(" ");
let result89 = Number(num89[0]);
for (let i = 1; i < Number(num89[2]); i++) {
  result89 += Number(num89[1]);
}
console.log(result89);

/* [90] 수 나열하기2
영일이는 프로그램을 만들어 더 큰 수도 자동으로 계산하고 싶어졌다.
시작 값(a), 등비(r), 몇 번째인지를 나타내는 정수(n)가 입력될 때 n번째 수를 출력하는 프로그램을 만들어보자.
입력) 시작 값(a), 등비의 값(r), 몇 번째 인지를 나타내는 정수(n)가 공백을 두고 입력된다.(모두 0 ~ 10)
출력) n번째 수를 출력한다.*/
const num90 = prompt("a, r, n을 입력하세요").split(" ");
let result90 = Number(num90[0]);
for (let i = 1; i < Number(num90[2]); i++) {
  result90 *= Number(num90[1]);
}
console.log(result90);

/* [91] 수 나열하기3
그래서 프로그램을 만들어 더 큰 수도 자동으로 계산하고 싶어졌다.
시작 값(a), 곱할 값(m), 더할 값(d), 몇 번째인지를 나타내는 정수(n)가 입력될 때, n번째 수를 출력하는 프로그램을 만들어보자.
입력) 시작 값(a), 곱할 값(m), 더할 값(d), 몇 번째 인지를 나타내는 정수(n)가 공백을 두고 입력된다.
    (a, m, d는 -50 ~ +50, n은 10이하의 자연수)
출력) n번째 수를 출력한다.*/
const num91 = prompt("a, m, d, n을 입력하세요").split(" ");
let result91 = Number(num91[0]);
for (let i = 1; i < Number(num91[3]); i++) {
  result91 = result91 * Number(num91[1]) + Number(num91[2]);
}
console.log(result91);

/* [92] 함께 문제 푸는 날
같은 날 동시에 가입한 3명의 사람들이 온라인 채점시스템에 들어와 문제를 푸는 날짜가 매우 규칙적이라고 할 때, 다시 모두 함께 문제를 풀게 되는 그날은 언제일까?
예를 들어 3명이 같은 날 가입/등업하고, 각각 3일마다, 7일마다, 9일마다 한 번씩 들어온다면, 처음 가입하고 63일 만에 다시 3명이 함께 문제를 풀게 된다.
입력) 같은 날 동시에 가입한 인원 3명이 규칙적으로 방문하는, 방문 주기가 공백을 두고 입력된다. (단, 입력값은 100이하의 자연수이다.)출력) 3명이 다시 모두 함께 방문해 문제를 풀어보는 날(동시 가입/등업 후 며칠 후?)을 출력한다.*/
const num92 = prompt("3명의 방문 주기를 입력하세요").split(" ");
let day = 1;
while (
  day % Number(num92[0]) != 0 ||
  day % Number(num92[1]) != 0 ||
  day % Number(num92[2]) != 0
) {
  day++;
}
console.log(day);
